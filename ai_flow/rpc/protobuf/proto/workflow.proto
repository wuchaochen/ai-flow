/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/api/annotations.proto";
import "common.proto";

option py_generic_services = true;
option go_package = "/ai_flow";

package ai_flow;

message WorkflowProto {
    string name = 2;
    string namespace = 3;
    string content = 4;
}
message WorkflowIdentifier {
    string namespace = 1;
    string workflow_name = 2;
}
message ListWorkflowsRequest {
    string namespace = 1;
    int64 page_size = 2;
    int64 offset = 3;
}
message UpdateWorkflowRequest {
    string namespace = 1;
    string workflow_name = 2;
    string content = 3;
}

service WorkflowService{
  rpc addWorkflow (WorkflowProto) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/add"
      body: "*"
    };
  }
  rpc updateWorkflow (UpdateWorkflowRequest) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/update"
      body: "*"
    };
  }
  rpc getWorkflow (WorkflowIdentifier) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/get"
      body: "*"
    };
  }
  rpc deleteWorkflow (WorkflowIdentifier) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/delete"
      body: "*"
    };
  }
  rpc disableWorkflow (WorkflowIdentifier) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/disable"
      body: "*"
    };
  }
  rpc enableWorkflow (WorkflowIdentifier) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/enable"
      body: "*"
    };
  }
  rpc listWorkflows (ListWorkflowsRequest) returns (Response) {
    option (google.api.http) = {
      post: "/workflow/list"
      body: "*"
    };
  }
}