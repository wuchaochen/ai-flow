#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import schedule_pb2 as schedule__pb2


class WorkflowScheduleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addSchedule = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/addSchedule',
                request_serializer=schedule__pb2.ScheduleProto.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.getSchedule = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/getSchedule',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.deleteSchedule = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/deleteSchedule',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.pauseSchedule = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/pauseSchedule',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.resumeSchedule = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/resumeSchedule',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.listSchedules = channel.unary_unary(
                '/ai_flow.WorkflowScheduleService/listSchedules',
                request_serializer=schedule__pb2.ListScheduleRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )


class WorkflowScheduleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resumeSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listSchedules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowScheduleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.addSchedule,
                    request_deserializer=schedule__pb2.ScheduleProto.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'getSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.getSchedule,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'deleteSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSchedule,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'pauseSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseSchedule,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'resumeSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.resumeSchedule,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'listSchedules': grpc.unary_unary_rpc_method_handler(
                    servicer.listSchedules,
                    request_deserializer=schedule__pb2.ListScheduleRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.WorkflowScheduleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowScheduleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/addSchedule',
            schedule__pb2.ScheduleProto.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/getSchedule',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/deleteSchedule',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/pauseSchedule',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resumeSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/resumeSchedule',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listSchedules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowScheduleService/listSchedules',
            schedule__pb2.ListScheduleRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkflowTriggerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addTrigger = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/addTrigger',
                request_serializer=schedule__pb2.TriggerProto.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.getTrigger = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/getTrigger',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.deleteTrigger = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/deleteTrigger',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.pauseTrigger = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/pauseTrigger',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.resumeTrigger = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/resumeTrigger',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.listTriggers = channel.unary_unary(
                '/ai_flow.WorkflowTriggerService/listTriggers',
                request_serializer=schedule__pb2.ListTriggerRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )


class WorkflowTriggerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resumeTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTriggers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowTriggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.addTrigger,
                    request_deserializer=schedule__pb2.TriggerProto.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'getTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrigger,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'deleteTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTrigger,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'pauseTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseTrigger,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'resumeTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.resumeTrigger,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'listTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.listTriggers,
                    request_deserializer=schedule__pb2.ListTriggerRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.WorkflowTriggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowTriggerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/addTrigger',
            schedule__pb2.TriggerProto.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/getTrigger',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/deleteTrigger',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/pauseTrigger',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resumeTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/resumeTrigger',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowTriggerService/listTriggers',
            schedule__pb2.ListTriggerRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
