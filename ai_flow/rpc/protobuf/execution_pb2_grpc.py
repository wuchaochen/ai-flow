#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import execution_pb2 as execution__pb2
from . import workflow_pb2 as workflow__pb2


class WorkflowExecutionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getWorkflowExecution = channel.unary_unary(
                '/ai_flow.WorkflowExecutionService/getWorkflowExecution',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.deleteWorkflowExecution = channel.unary_unary(
                '/ai_flow.WorkflowExecutionService/deleteWorkflowExecution',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.listWorkflowExecutions = channel.unary_unary(
                '/ai_flow.WorkflowExecutionService/listWorkflowExecutions',
                request_serializer=execution__pb2.ListWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.startWorkflowExecution = channel.unary_unary(
                '/ai_flow.WorkflowExecutionService/startWorkflowExecution',
                request_serializer=workflow__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.stopWorkflowExecution = channel.unary_unary(
                '/ai_flow.WorkflowExecutionService/stopWorkflowExecution',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )


class WorkflowExecutionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflowExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflowExecution,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowExecution,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'listWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflowExecutions,
                    request_deserializer=execution__pb2.ListWorkflowExecutionsRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'startWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startWorkflowExecution,
                    request_deserializer=workflow__pb2.WorkflowIdentifier.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'stopWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopWorkflowExecution,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.WorkflowExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowExecutionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowExecutionService/getWorkflowExecution',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowExecutionService/deleteWorkflowExecution',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowExecutionService/listWorkflowExecutions',
            execution__pb2.ListWorkflowExecutionsRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowExecutionService/startWorkflowExecution',
            workflow__pb2.WorkflowIdentifier.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.WorkflowExecutionService/stopWorkflowExecution',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TaskExecutionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTaskExecution = channel.unary_unary(
                '/ai_flow.TaskExecutionService/getTaskExecution',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.listTaskExecutions = channel.unary_unary(
                '/ai_flow.TaskExecutionService/listTaskExecutions',
                request_serializer=execution__pb2.ListTaskExecutionsRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.startTaskExecution = channel.unary_unary(
                '/ai_flow.TaskExecutionService/startTaskExecution',
                request_serializer=execution__pb2.TaskIdentifier.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.stopTaskExecution = channel.unary_unary(
                '/ai_flow.TaskExecutionService/stopTaskExecution',
                request_serializer=common__pb2.IdRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )


class TaskExecutionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTaskExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskExecution,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'listTaskExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.listTaskExecutions,
                    request_deserializer=execution__pb2.ListTaskExecutionsRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'startTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startTaskExecution,
                    request_deserializer=execution__pb2.TaskIdentifier.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'stopTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTaskExecution,
                    request_deserializer=common__pb2.IdRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.TaskExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskExecutionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.TaskExecutionService/getTaskExecution',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTaskExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.TaskExecutionService/listTaskExecutions',
            execution__pb2.ListTaskExecutionsRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.TaskExecutionService/startTaskExecution',
            execution__pb2.TaskIdentifier.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.TaskExecutionService/stopTaskExecution',
            common__pb2.IdRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
