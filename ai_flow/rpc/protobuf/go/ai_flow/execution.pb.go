//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.15.6
// source: execution.proto

package ai_flow

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowExecutionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace    string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowName string                 `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Status       string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	RunType      string                 `protobuf:"bytes,5,opt,name=run_type,json=runType,proto3" json:"run_type,omitempty"`
	BeginDate    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=begin_date,json=beginDate,proto3" json:"begin_date,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *WorkflowExecutionProto) Reset() {
	*x = WorkflowExecutionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionProto) ProtoMessage() {}

func (x *WorkflowExecutionProto) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionProto.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionProto) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowExecutionProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowExecutionProto) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkflowExecutionProto) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *WorkflowExecutionProto) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowExecutionProto) GetRunType() string {
	if x != nil {
		return x.RunType
	}
	return ""
}

func (x *WorkflowExecutionProto) GetBeginDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginDate
	}
	return nil
}

func (x *WorkflowExecutionProto) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type ListWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowName string `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	PageSize     int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset       int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListWorkflowExecutionsRequest) Reset() {
	*x = ListWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ListWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{1}
}

func (x *ListWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListWorkflowExecutionsRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *ListWorkflowExecutionsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWorkflowExecutionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TaskExecutionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskName            string                 `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	WorkflowExecutionId int64                  `protobuf:"varint,3,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	SequenceNumber      int64                  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	TryNumber           int64                  `protobuf:"varint,5,opt,name=try_number,json=tryNumber,proto3" json:"try_number,omitempty"`
	Status              string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	BeginDate           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=begin_date,json=beginDate,proto3" json:"begin_date,omitempty"`
	EndDate             *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *TaskExecutionProto) Reset() {
	*x = TaskExecutionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecutionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionProto) ProtoMessage() {}

func (x *TaskExecutionProto) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionProto.ProtoReflect.Descriptor instead.
func (*TaskExecutionProto) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{2}
}

func (x *TaskExecutionProto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskExecutionProto) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskExecutionProto) GetWorkflowExecutionId() int64 {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return 0
}

func (x *TaskExecutionProto) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TaskExecutionProto) GetTryNumber() int64 {
	if x != nil {
		return x.TryNumber
	}
	return 0
}

func (x *TaskExecutionProto) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskExecutionProto) GetBeginDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginDate
	}
	return nil
}

func (x *TaskExecutionProto) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type ListTaskExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecutionId string `protobuf:"bytes,1,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	PageSize            int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset              int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListTaskExecutionsRequest) Reset() {
	*x = ListTaskExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskExecutionsRequest) ProtoMessage() {}

func (x *ListTaskExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{3}
}

func (x *ListTaskExecutionsRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *ListTaskExecutionsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTaskExecutionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TaskIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecutionId string `protobuf:"bytes,1,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	TaskName            string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
}

func (x *TaskIdentifier) Reset() {
	*x = TaskIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentifier) ProtoMessage() {}

func (x *TaskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentifier.ProtoReflect.Descriptor instead.
func (*TaskIdentifier) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{4}
}

func (x *TaskIdentifier) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *TaskIdentifier) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

var File_execution_proto protoreflect.FileDescriptor

var file_execution_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x61, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xb9, 0x04, 0x0a, 0x18, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x17, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x6e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x63, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x6f,
	0x70, 0x3a, 0x01, 0x2a, 0x32, 0xa6, 0x03, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x12, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x22, 0x15, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x11,
	0x73, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x42, 0x0d, 0x5a,
	0x08, 0x2f, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x90, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_execution_proto_rawDescOnce sync.Once
	file_execution_proto_rawDescData = file_execution_proto_rawDesc
)

func file_execution_proto_rawDescGZIP() []byte {
	file_execution_proto_rawDescOnce.Do(func() {
		file_execution_proto_rawDescData = protoimpl.X.CompressGZIP(file_execution_proto_rawDescData)
	})
	return file_execution_proto_rawDescData
}

var file_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_execution_proto_goTypes = []interface{}{
	(*WorkflowExecutionProto)(nil),        // 0: ai_flow.WorkflowExecutionProto
	(*ListWorkflowExecutionsRequest)(nil), // 1: ai_flow.ListWorkflowExecutionsRequest
	(*TaskExecutionProto)(nil),            // 2: ai_flow.TaskExecutionProto
	(*ListTaskExecutionsRequest)(nil),     // 3: ai_flow.ListTaskExecutionsRequest
	(*TaskIdentifier)(nil),                // 4: ai_flow.TaskIdentifier
	(*timestamppb.Timestamp)(nil),         // 5: google.protobuf.Timestamp
	(*IdRequest)(nil),                     // 6: ai_flow.IdRequest
	(*WorkflowIdentifier)(nil),            // 7: ai_flow.WorkflowIdentifier
	(*Response)(nil),                      // 8: ai_flow.Response
}
var file_execution_proto_depIdxs = []int32{
	5,  // 0: ai_flow.WorkflowExecutionProto.begin_date:type_name -> google.protobuf.Timestamp
	5,  // 1: ai_flow.WorkflowExecutionProto.end_date:type_name -> google.protobuf.Timestamp
	5,  // 2: ai_flow.TaskExecutionProto.begin_date:type_name -> google.protobuf.Timestamp
	5,  // 3: ai_flow.TaskExecutionProto.end_date:type_name -> google.protobuf.Timestamp
	6,  // 4: ai_flow.WorkflowExecutionService.getWorkflowExecution:input_type -> ai_flow.IdRequest
	6,  // 5: ai_flow.WorkflowExecutionService.deleteWorkflowExecution:input_type -> ai_flow.IdRequest
	1,  // 6: ai_flow.WorkflowExecutionService.listWorkflowExecutions:input_type -> ai_flow.ListWorkflowExecutionsRequest
	7,  // 7: ai_flow.WorkflowExecutionService.startWorkflowExecution:input_type -> ai_flow.WorkflowIdentifier
	6,  // 8: ai_flow.WorkflowExecutionService.stopWorkflowExecution:input_type -> ai_flow.IdRequest
	6,  // 9: ai_flow.TaskExecutionService.getTaskExecution:input_type -> ai_flow.IdRequest
	3,  // 10: ai_flow.TaskExecutionService.listTaskExecutions:input_type -> ai_flow.ListTaskExecutionsRequest
	4,  // 11: ai_flow.TaskExecutionService.startTaskExecution:input_type -> ai_flow.TaskIdentifier
	6,  // 12: ai_flow.TaskExecutionService.stopTaskExecution:input_type -> ai_flow.IdRequest
	8,  // 13: ai_flow.WorkflowExecutionService.getWorkflowExecution:output_type -> ai_flow.Response
	8,  // 14: ai_flow.WorkflowExecutionService.deleteWorkflowExecution:output_type -> ai_flow.Response
	8,  // 15: ai_flow.WorkflowExecutionService.listWorkflowExecutions:output_type -> ai_flow.Response
	8,  // 16: ai_flow.WorkflowExecutionService.startWorkflowExecution:output_type -> ai_flow.Response
	8,  // 17: ai_flow.WorkflowExecutionService.stopWorkflowExecution:output_type -> ai_flow.Response
	8,  // 18: ai_flow.TaskExecutionService.getTaskExecution:output_type -> ai_flow.Response
	8,  // 19: ai_flow.TaskExecutionService.listTaskExecutions:output_type -> ai_flow.Response
	8,  // 20: ai_flow.TaskExecutionService.startTaskExecution:output_type -> ai_flow.Response
	8,  // 21: ai_flow.TaskExecutionService.stopTaskExecution:output_type -> ai_flow.Response
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_execution_proto_init() }
func file_execution_proto_init() {
	if File_execution_proto != nil {
		return
	}
	file_common_proto_init()
	file_workflow_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_execution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExecutionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_execution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_execution_proto_goTypes,
		DependencyIndexes: file_execution_proto_depIdxs,
		MessageInfos:      file_execution_proto_msgTypes,
	}.Build()
	File_execution_proto = out.File
	file_execution_proto_rawDesc = nil
	file_execution_proto_goTypes = nil
	file_execution_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkflowExecutionServiceClient is the client API for WorkflowExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowExecutionServiceClient interface {
	GetWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest, opts ...grpc.CallOption) (*Response, error)
	StartWorkflowExecution(ctx context.Context, in *WorkflowIdentifier, opts ...grpc.CallOption) (*Response, error)
	StopWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type workflowExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowExecutionServiceClient(cc grpc.ClientConnInterface) WorkflowExecutionServiceClient {
	return &workflowExecutionServiceClient{cc}
}

func (c *workflowExecutionServiceClient) GetWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.WorkflowExecutionService/getWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowExecutionServiceClient) DeleteWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.WorkflowExecutionService/deleteWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowExecutionServiceClient) ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.WorkflowExecutionService/listWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowExecutionServiceClient) StartWorkflowExecution(ctx context.Context, in *WorkflowIdentifier, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.WorkflowExecutionService/startWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowExecutionServiceClient) StopWorkflowExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.WorkflowExecutionService/stopWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowExecutionServiceServer is the server API for WorkflowExecutionService service.
type WorkflowExecutionServiceServer interface {
	GetWorkflowExecution(context.Context, *IdRequest) (*Response, error)
	DeleteWorkflowExecution(context.Context, *IdRequest) (*Response, error)
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*Response, error)
	StartWorkflowExecution(context.Context, *WorkflowIdentifier) (*Response, error)
	StopWorkflowExecution(context.Context, *IdRequest) (*Response, error)
}

// UnimplementedWorkflowExecutionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowExecutionServiceServer struct {
}

func (*UnimplementedWorkflowExecutionServiceServer) GetWorkflowExecution(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecution not implemented")
}
func (*UnimplementedWorkflowExecutionServiceServer) DeleteWorkflowExecution(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowExecution not implemented")
}
func (*UnimplementedWorkflowExecutionServiceServer) ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowExecutions not implemented")
}
func (*UnimplementedWorkflowExecutionServiceServer) StartWorkflowExecution(context.Context, *WorkflowIdentifier) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflowExecution not implemented")
}
func (*UnimplementedWorkflowExecutionServiceServer) StopWorkflowExecution(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkflowExecution not implemented")
}

func RegisterWorkflowExecutionServiceServer(s *grpc.Server, srv WorkflowExecutionServiceServer) {
	s.RegisterService(&_WorkflowExecutionService_serviceDesc, srv)
}

func _WorkflowExecutionService_GetWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServiceServer).GetWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.WorkflowExecutionService/GetWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServiceServer).GetWorkflowExecution(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowExecutionService_DeleteWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServiceServer).DeleteWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.WorkflowExecutionService/DeleteWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServiceServer).DeleteWorkflowExecution(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowExecutionService_ListWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServiceServer).ListWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.WorkflowExecutionService/ListWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServiceServer).ListWorkflowExecutions(ctx, req.(*ListWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowExecutionService_StartWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServiceServer).StartWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.WorkflowExecutionService/StartWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServiceServer).StartWorkflowExecution(ctx, req.(*WorkflowIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowExecutionService_StopWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServiceServer).StopWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.WorkflowExecutionService/StopWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServiceServer).StopWorkflowExecution(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowExecutionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.WorkflowExecutionService",
	HandlerType: (*WorkflowExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getWorkflowExecution",
			Handler:    _WorkflowExecutionService_GetWorkflowExecution_Handler,
		},
		{
			MethodName: "deleteWorkflowExecution",
			Handler:    _WorkflowExecutionService_DeleteWorkflowExecution_Handler,
		},
		{
			MethodName: "listWorkflowExecutions",
			Handler:    _WorkflowExecutionService_ListWorkflowExecutions_Handler,
		},
		{
			MethodName: "startWorkflowExecution",
			Handler:    _WorkflowExecutionService_StartWorkflowExecution_Handler,
		},
		{
			MethodName: "stopWorkflowExecution",
			Handler:    _WorkflowExecutionService_StopWorkflowExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execution.proto",
}

// TaskExecutionServiceClient is the client API for TaskExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskExecutionServiceClient interface {
	GetTaskExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	ListTaskExecutions(ctx context.Context, in *ListTaskExecutionsRequest, opts ...grpc.CallOption) (*Response, error)
	StartTaskExecution(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*Response, error)
	StopTaskExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type taskExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskExecutionServiceClient(cc grpc.ClientConnInterface) TaskExecutionServiceClient {
	return &taskExecutionServiceClient{cc}
}

func (c *taskExecutionServiceClient) GetTaskExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.TaskExecutionService/getTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecutionServiceClient) ListTaskExecutions(ctx context.Context, in *ListTaskExecutionsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.TaskExecutionService/listTaskExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecutionServiceClient) StartTaskExecution(ctx context.Context, in *TaskIdentifier, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.TaskExecutionService/startTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecutionServiceClient) StopTaskExecution(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.TaskExecutionService/stopTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskExecutionServiceServer is the server API for TaskExecutionService service.
type TaskExecutionServiceServer interface {
	GetTaskExecution(context.Context, *IdRequest) (*Response, error)
	ListTaskExecutions(context.Context, *ListTaskExecutionsRequest) (*Response, error)
	StartTaskExecution(context.Context, *TaskIdentifier) (*Response, error)
	StopTaskExecution(context.Context, *IdRequest) (*Response, error)
}

// UnimplementedTaskExecutionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskExecutionServiceServer struct {
}

func (*UnimplementedTaskExecutionServiceServer) GetTaskExecution(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExecution not implemented")
}
func (*UnimplementedTaskExecutionServiceServer) ListTaskExecutions(context.Context, *ListTaskExecutionsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskExecutions not implemented")
}
func (*UnimplementedTaskExecutionServiceServer) StartTaskExecution(context.Context, *TaskIdentifier) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTaskExecution not implemented")
}
func (*UnimplementedTaskExecutionServiceServer) StopTaskExecution(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTaskExecution not implemented")
}

func RegisterTaskExecutionServiceServer(s *grpc.Server, srv TaskExecutionServiceServer) {
	s.RegisterService(&_TaskExecutionService_serviceDesc, srv)
}

func _TaskExecutionService_GetTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServiceServer).GetTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.TaskExecutionService/GetTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServiceServer).GetTaskExecution(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecutionService_ListTaskExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServiceServer).ListTaskExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.TaskExecutionService/ListTaskExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServiceServer).ListTaskExecutions(ctx, req.(*ListTaskExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecutionService_StartTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServiceServer).StartTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.TaskExecutionService/StartTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServiceServer).StartTaskExecution(ctx, req.(*TaskIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecutionService_StopTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServiceServer).StopTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.TaskExecutionService/StopTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServiceServer).StopTaskExecution(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskExecutionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.TaskExecutionService",
	HandlerType: (*TaskExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTaskExecution",
			Handler:    _TaskExecutionService_GetTaskExecution_Handler,
		},
		{
			MethodName: "listTaskExecutions",
			Handler:    _TaskExecutionService_ListTaskExecutions_Handler,
		},
		{
			MethodName: "startTaskExecution",
			Handler:    _TaskExecutionService_StartTaskExecution_Handler,
		},
		{
			MethodName: "stopTaskExecution",
			Handler:    _TaskExecutionService_StopTaskExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execution.proto",
}
