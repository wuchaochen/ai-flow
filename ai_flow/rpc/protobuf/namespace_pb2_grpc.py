#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import namespace_pb2 as namespace__pb2


class NamespaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addNamespace = channel.unary_unary(
                '/ai_flow.NamespaceService/addNamespace',
                request_serializer=namespace__pb2.NamespaceProto.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.getNamespace = channel.unary_unary(
                '/ai_flow.NamespaceService/getNamespace',
                request_serializer=namespace__pb2.NamespaceIdentifier.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.updateNamespace = channel.unary_unary(
                '/ai_flow.NamespaceService/updateNamespace',
                request_serializer=namespace__pb2.UpdateNamespaceRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.listNamespace = channel.unary_unary(
                '/ai_flow.NamespaceService/listNamespace',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.deleteNamespace = channel.unary_unary(
                '/ai_flow.NamespaceService/deleteNamespace',
                request_serializer=common__pb2.NameRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )


class NamespaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NamespaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.addNamespace,
                    request_deserializer=namespace__pb2.NamespaceProto.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'getNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.getNamespace,
                    request_deserializer=namespace__pb2.NamespaceIdentifier.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'updateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.updateNamespace,
                    request_deserializer=namespace__pb2.UpdateNamespaceRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'listNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.listNamespace,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'deleteNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteNamespace,
                    request_deserializer=common__pb2.NameRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.NamespaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NamespaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.NamespaceService/addNamespace',
            namespace__pb2.NamespaceProto.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.NamespaceService/getNamespace',
            namespace__pb2.NamespaceIdentifier.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.NamespaceService/updateNamespace',
            namespace__pb2.UpdateNamespaceRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.NamespaceService/listNamespace',
            common__pb2.ListRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.NamespaceService/deleteNamespace',
            common__pb2.NameRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
